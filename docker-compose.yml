version: "3.9"

services:
  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,PLAINTEXT_HOST://:29092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
    volumes:
      - kafka_data:/bitnami/kafka
    healthcheck:
      test: ["CMD", "bash", "-c", "echo > /dev/tcp/kafka/9092"]
      interval: 10s
      retries: 10
      start_period: 30s
      timeout: 5s

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: nestjs-backend
    ports:
      - "3000:3000"
    env_file:
      - ./backend/.env
    environment:
      - KAFKA_BROKER=kafka:9092
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/keys:/app/keys
    depends_on:
      kafka:
        condition: service_healthy

  python-service:
    build:
      context: ./python-service
      dockerfile: Dockerfile
    container_name: fastapi-service
    ports:
      - "8000:8000"
    env_file:
      - ./python-service/.env
    environment:
      - KAFKA_BROKER=kafka:9092
    volumes:
      - ./python-service/certs:/app/certs
    depends_on:
      kafka:
        condition: service_healthy

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: nextjs-frontend
    ports:
      - "3001:3001"
    environment:
      - NEXT_PUBLIC_API_URL=http://backend:3000
      - NEXT_PUBLIC_SOCKET_URL=http://backend:3000/
    depends_on:
      backend:
        condition: service_started
      kafka:
        condition: service_healthy

volumes:
  kafka_data:
